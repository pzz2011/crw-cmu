#summary A guide to setting up development for Airboat Server and Client

= Introduction =

Development for the Airboat server and Android app is done on Eclipse Helios using the Android SDK. Instructions are pretty straightforward, and are accessible on http://developer.android.com/sdk/installing.html

Development on the client side is done on Netbeans 6.9 IDE and doesn't require any majotr configuration. You should be good to go running airboat-client from netbeans. You might need to change the folder attributes however. 

= Compiling with rosjava =

Follow the instructions on http://code.google.com/p/rosjava/wiki/Welcome to download rosjava.

So, check out the rosjava repository:

`rosinstall ~/ros http://rosjava.googlecode.com/hg/rosjava.rosinstall`
(where ~/ros is where you'd have your default workspace)

and then run `ant dist` to build the jar files within rosjava.

Now, to develop any Android application  in Eclipse utilizing rosjava, you need to include the ~/ros/rosjava/android/library android project and the ~/ros/rosjava/rosjava project for hard coded dependencies. You will probably also need to fix the libraries that are to be included in the project as the default paths are relative. These libraries should have been built in ~/ros/rosjava/rosjava/lib. Take care, however to not include rosjava.jar or mockito-all-*.jar as they are already defined in /rosjava

==Using the rosjava tutorials==

===Making the code run on an Android device===
#In ~/ros/rosjava/android
goto /tutorials and /library, and modify build_projects.sh to point to android-10 (or whatever your target android sdk is) instead of (weirdly) android-9

#Open any /tutorials project in Eclipse. Library paths will be messed up, so deleted them, and include them from ~/ros/rosjava/rosjava/lib. Take care not to include rosjava.jar and mockito-all-*.jar

#Library (and project) issues - use File->Import existing project to include ~/ros/rosjava/android/library and ~/ros/rosjava/rosjava

#You will still have errors in the Manifest file. Remove the tags stating uses=help, and the code should compile

===Interacting with the topics on the Android device===

Due to the alpha nature of 



127.0.0.1

Need to set nodeConfiguration.setHost.....
and set rosCore.createPublic

So, by statically assigning the nodes to run on the device local IP address, and the roscore master to be running on a nother machine in the network, we can get ros working :D

roscore running on phone is not a full implementation as yet - cant interact with it yet - can only see published things


= Details =

The above procedure has been tested to work on the following distributions

Ubuntu 10.10, 11.04
Fedora 15
Mac OS X 10.6.7